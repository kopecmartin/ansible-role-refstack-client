---
- name: Install required packages
  include: install-packages.yaml

- name: Create python-tempestconf venv with latest pip, setuptools and pbr
  pip:
      virtualenv: "{{ virtualenvs.tempestconf_venv }}"
      name: "{{ item }}"
      state: latest
  with_items:
      - pip
      - setuptools
      - pbr

- name: Clone refstack-client
  git:
    repo: 'https://github.com/openstack/refstack-client.git'
    dest: "{{ source.refstack_client_source }}"

- name: Clone python-tempestconf
  git:
    repo: 'https://github.com/openstack/python-tempestconf.git'
    dest: "{{ source.tempestconf_source }}"

- name: Install refstack-client
  command: ./setup_env
  args:
    chdir: "{{ source.refstack_client_source }}"

- name: Install python-tempestconf
  pip:
    name: "."
    virtualenv: "{{ virtualenvs.tempestconf_venv }}"
    chdir: "{{ source.tempestconf_source }}"
  when: tempest_config_path is not defined

- name: Generate tempest configuration file
  shell: |
    set -ex
    export PATH=$PATH:/usr/local/sbin:/usr/sbin
    source {{ source_credentials }}
    source {{ virtualenvs.tempestconf_venv }}/bin/activate
    printenv
    discover-tempest-config \
          --debug \
          -v \
          --create \
          identity.uri $OS_AUTH_URL \
          identity.admin_password $OS_PASSWORD \
          validation.run_validation true \
          compute.allow_tenant_isolation true \
          compute-feature-enabled.resize true \
          image.http_image {{ url_cirros_image }}
  args:
    chdir: "{{ source.tempestconf_source }}"
    executable: /bin/bash
  when: tempest_config_path is not defined

- name: Set path to newly generated tempest.conf
  set_fact:
    path_to_tempest_config: "{{ source.tempestconf_source }}/etc/tempest.conf"
  when: tempest_config_path is not defined

- name: Set path to provided tempest.conf
  set_fact:
    path_to_tempest_config: "{{ tempest_config_path }}"
  when: tempest_config_path is defined

- name: Validate setup
  shell: |
    set -ex
    source .venv/bin/activate
    refstack-client test -c {{ path_to_tempest_config }} \
      -v \
      -- \
      --regex tempest.api.identity.v3.test_tokens.TokensV3Test.test_create_token
  args:
    chdir: "{{ source.refstack_client_source }}"
    executable: /bin/bash

- name: Generate test script
  template:
    src: test-script.sh.j2
    dest: "{{ source.refstack_client_source }}/test-script.sh"
    mode: 0744

- name: Run tests
  shell: |
    ./test-script.sh
  args:
    chdir: "{{ source.refstack_client_source }}"
    executable: /bin/bash
  ignore_errors: True

- name: Find the test result json file
  shell: |
    set -ex
    ls | grep "\.json" | tail -1
  register: ls_out
  args:
    chdir: "{{ source.refstack_client_source }}/.tempest/.testrepository"

- name: Upload results anonymously
  shell: |
    set -ex
    source .venv/bin/activate
    refstack-client upload ".tempest/.testrepository/{{ ls_out.stdout }}"
  args:
    chdir: "{{ source.refstack_client_source }}"
    executable: /bin/bash
  when: upload_results and private_key_path is not defined

- name: Upload results with signature
  shell: |
    set -ex
    source .venv/bin/activate
    refstack-client upload ".tempest/.testrepository/{{ ls_out.stdout }}" \
      --url {{ server }} \
      -i {{ private_key_path }}
  args:
    chdir: "{{ source.refstack_client_source }}"
    executable: /bin/bash
  when: upload_results and private_key_path is defined
